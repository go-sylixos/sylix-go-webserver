const l={emoji:/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,specialChar:/[`~!@#$%^&*()_\-+=<>?:"{}|,.\\/;'\\[\]·~！@#￥%……&*（）——\-+={}|《》？：“”【】、；‘’，。、]/im},a=(e,o)=>e.tagName.toLowerCase()===o?e:e.querySelector(o),f=e=>Object.prototype.toString.call(e)==="[object RegExp]",g=e=>e===""||e===null||e===void 0||Object.keys(e).length===0,y="filterValue",d=(e,o)=>{const{value:t,modifiers:s}=o;let u="input";typeof t=="object"&&t.type&&(u=t.type);const i=a(e,u);if(!i)return;if(g(t)){console.error("filterValue directive value must be string in rules or object!");return}let n=i.value;if(typeof t=="string")if(Object.keys(l).includes(t)){const r=l[t];i.value=n.replace(r,""),i.dispatchEvent(new Event(s.lazy?"change":"input"));return}else console.error(`filterValue directive no support ${t} !`);if(typeof t=="object"&&Object.keys(t).includes("filteringRules")){const{filteringRules:r}=t;typeof r=="string"&&f(r)?i.value=n.replace(r,""):r instanceof Array&&r.length>0&&(r.forEach(c=>{if(Object.keys(l).includes(c)){const p=l[c];n=n.replace(p,"")}else console.error(`filterValue directive no support ${c} !`)}),i.value=n),i.dispatchEvent(new Event(s.lazy?"change":"input"))}};export{d as directive,y as directiveName};
